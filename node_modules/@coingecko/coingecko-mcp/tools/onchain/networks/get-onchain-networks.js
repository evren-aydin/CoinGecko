"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.tool = exports.metadata = void 0;
const filtering_1 = require("@coingecko/coingecko-mcp/filtering");
const types_1 = require("@coingecko/coingecko-mcp/tools/types");
exports.metadata = {
    resource: 'onchain.networks',
    operation: 'read',
    tags: [],
    httpMethod: 'get',
    httpPath: '/onchain/networks',
    operationId: 'networks-list',
};
exports.tool = {
    name: 'get_onchain_networks',
    description: "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported networks on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              coingecko_asset_platform_id: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    inputSchema: {
        type: 'object',
        properties: {
            page: {
                type: 'integer',
                description: 'page through results <br> Default value: 1',
            },
            jq_filter: {
                type: 'string',
                title: 'jq Filter',
                description: 'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
            },
        },
        required: [],
    },
};
const handler = async (client, args) => {
    const body = args;
    return (0, types_1.asTextContentResult)(await (0, filtering_1.maybeFilter)(args, await client.onchain.networks.get(body)));
};
exports.handler = handler;
exports.default = { metadata: exports.metadata, tool: exports.tool, handler: exports.handler };
//# sourceMappingURL=get-onchain-networks.js.map